{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","bid_value","highest_bid","contract_balance","highest_bidder","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","setState","alert","error","bid","methods","send","from","value","get_contract_Balance","getContractBalance","call","response","withdraw","get_highestBid","highestBid","get_highestBidder","highestBidder","handleChange","event","target","this","className","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.669f8b8b.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n  \tweb3: null, \n  \taccounts: null, \n  \tcontract: null,\n  \tbid_value: 0,\n  \thighest_bid: 0,\n  \tcontract_balance: 0,\n  \thighest_bidder: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  bid = async () => {\n  \n\ttry {\n    \t  const { accounts, contract } = this.state;\n\n    \t  // Bid from accounts[0]\n    \t  await contract.methods.bid().send({ from: accounts[0] , value: this.state.bid_value});\n\t} catch (error) {\n\t  alert(\n             `Failed to bid. Check console for details.`,\n          );\n          console.error(error);\n\t}\n  };\n  \n  get_contract_Balance = async () => {\n    const contract = this.state.contract;\n    const web3 = this.state.web3;\n    \n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.getContractBalance().call();;\n\n    // Update state with the result.\n    \n    this.setState({ contract_balance: response });\n  };\n  \n  \n  withdraw = async () => {\n  \n\ttry {\n    \t  const { accounts, contract } = this.state;\n\n    \t  // Bid from accounts[0]\n    \t  await contract.methods.withdraw().send({ from: accounts[0] });\n\t} catch (error) {\n\t  alert(\n             `Failed to withdraw. Check console for details.`,\n          );\n          console.error(error);\n\t}\n  };\n  \n  get_highestBid = async () => {\n    const contract = this.state.contract;\n\n    \n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.highestBid().call();\n\n    // Update state with the result.\n    this.setState({ highest_bid: response });\n  };\n  \n  get_highestBidder = async () => {\n    const contract = this.state.contract;\n\n    \n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.highestBidder().call();\n\n    // Update state with the result.\n    this.setState({ highest_bidder: response });\n  };\n  \n  handleChange = (event) => {    \n  \tthis.setState({bid_value: event.target.value}, () => {\n  \t  console.log(this.state.bid_value)\n  \t});  \n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <h2>Smart Contract Example</h2>\n        <p>\n          Make your offer\n        </p>\n        <input type=\"text\" onChange={this.handleChange} />\n        <button onClick = {this.bid}>Bid</button>\n        <div>Bid value is: {this.state.bid_value}</div>\n        <p>\n          Withdraw\n        </p>\n        <button onClick = {this.withdraw}> Withdraw </button>\n        <> </>\n        <p>\n          Other functionalities\n        </p>\n        <button onClick = {this.get_highestBid}>Get Highest Bid</button>\n        <div>Highest bid is: {this.state.highest_bid}</div>\n        <> </>\n        <button onClick = {this.get_highestBidder}>Get Highest Bidder</button>\n        <div>Highest bidder is: {this.state.highest_bidder}</div>\n        <> \n        </>\n        <button onClick = {this.get_contract_Balance}>Get Contract Balance</button>\n        <div>Contract balance is: {this.state.contract_balance}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}